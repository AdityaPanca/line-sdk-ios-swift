default_platform(:ios)

platform :ios do

  before_all do
    xcversion(version: "~> 10.1")
  end

  desc "Switch to Beta environment"
  lane :to_beta do
    Action.sh("ruby ../script/to_beta.rb")
  end

  desc "Run tests."
  lane :tests do
    sdk_tests
    sample_tests
  end

  lane :sdk_tests do
    swift_version = ENV["SWIFT_VERSION"] || "4.2"
    run_tests(
        workspace: "LineSDK.xcworkspace",
        devices: ["iPhone 6s"],
        scheme: "LineSDK",
        xcargs: "SWIFT_VERSION=#{swift_version}"
    )
    
    run_tests(
        workspace: "LineSDK.xcworkspace",
        devices: ["iPhone 6s"],
        scheme: "LineSDKObjC",
        xcargs: "SWIFT_VERSION=#{swift_version}"
    )
  end

  lane :sample_tests do
    run_tests(
        workspace: "LineSDK.xcworkspace",
        devices: ["iPhone 6s"],
        scheme: "LineSDKSample"
    )
  end

  desc "Lint to check Carthage and CocoaPods compatibility."
  lane :lint do
    lint_carthage
    lint_pod
  end

  lane :lint_pod do
    swift_version = ENV["SWIFT_VERSION"] || "4.2"
    Action.sh("bundle exec pod lib lint ../LineSDKSwift.podspec --swift-version=#{swift_version}")
  end

  lane :lint_carthage do
    carthage(command: "build", no_skip_current: true)
  end

  desc "Release a new version."
  lane :release do |options|
    target_version = options[:version]
    raise "The version is missed. Use `fastlane release version:{version_number}`.`" if target_version.nil?

    ensure_git_branch
    ensure_git_status_clean

    tests
    lint

    increment_build_number(
        build_number: number_of_commits,
        xcodeproj: "LineSDK/LineSDK.xcodeproj"
    )
    increment_version_number(
        version_number: target_version,
        xcodeproj: "LineSDK/LineSDK.xcodeproj"
    )

    bump_constant_version(version: target_version)

    version_bump_podspec(path: "LineSDKSwift.podspec", version_number: target_version)
    
    release_content = read_changelog(excluded_markdown_elements: [])

    change_log(version: target_version)
    
    git_commit_all(message: "Bump version to #{target_version}")
    Actions.sh("git tag -u #{ENV["GPG_KEY_ID"]} #{target_version} -m ''")

    xcframework

    push_to_git_remote

    set_github_release(
      repository_name: "line/line-sdk-ios-swift",
      api_token: ENV["GITHUB_TOKEN"],
      name: target_version,
      tag_name: target_version,
      description: release_content,
      upload_assets: ["build/LineSDK.xcframework", "build/LineSDKObjC.xcframework"]
    )

    pod_push
  end

  desc "Generate documentation"
  lane :doc do
    jazzy
  end

  desc "Generate documentation for internal usage"
  lane :doc_internal do
    jazzy(config: ".jazzy-internal.yaml")
  end

  lane :change_log do |options|
    target_version = options[:version]
    raise "The version is missed. You need to specify a version parameter." if target_version.nil?
    stamp_changelog(section_identifier: target_version, git_tag: target_version)
  end

  lane :ensure_latest_carthage do
    Actions.sh("brew update")
    Actions.sh("brew outdated carthage || brew upgrade carthage")
  end

  lane :bump_constant_version do |options|
    target_version = options[:version]
    replacing = "public static let SDKVersion = \"#{target_version}\""
    regex = "public static let SDKVersion = .*"
    Action.sh("sed -i -e 's/#{regex}/#{replacing}/g' ../LineSDK/LineSDK/Utils/Constant.swift")
  end

  desc "Create binary frameworks with the `xcframework` format under the `build/` folder."
  lane :xcframework do
    xcversion(version: "~> 11.0")
    FileUtils.rm_rf '../build'

    # Remove this after archive bug fixed in a future Xcode version.
    fix_xcode11_beta4_setting = {
        'LD_VERIFY_BITCODE' => 'NO'
    }

    ["LineSDK", "LineSDKObjC"].each do |scheme|

        frameworks = []

        ["iphoneos", "iphonesimulator"].each do |sdk|
            archive_path = "build/#{scheme} #{sdk}.xcarchive"
            xcodebuild(
                archive: true, 
                archive_path: archive_path,
                scheme: "#{scheme}Binary", 
                sdk: sdk,
                build_settings: fix_xcode11_beta4_setting
            )
            frameworks.push("#{archive_path}/Products/Library/Frameworks/LineSDK.framework")
        end

        # `xcodebuild` action in fastlane does not support `-create-xcframework` arg yet.
        # Change it back to use fastlane action later when it is prepared.
        framework_args = frameworks.map { |framework_path| "-framework '#{framework_path}'"}
        args = "-create-xcframework #{framework_args.join(" ")} -output 'build/#{scheme}.xcframework'"
        Dir.chdir("..") do
            Action.sh "xcodebuild #{args}"
        end
    end
  end
end
